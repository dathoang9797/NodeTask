{"version":3,"file":"Controllers/index.js","mappings":"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","sources":["webpack://dathoang29101997/./src/Controllers/ErrorController.ts","webpack://dathoang29101997/./src/Controllers/TaskController.ts","webpack://dathoang29101997/./src/Controllers/UserController.ts","webpack://dathoang29101997/./src/Controllers/index.ts","webpack://dathoang29101997/./src/Email/Account.ts","webpack://dathoang29101997/./src/Models/TaskModels.ts","webpack://dathoang29101997/./src/Models/UserModels.ts","webpack://dathoang29101997/./src/Utils/AppErrorHanding.ts","webpack://dathoang29101997/./src/Utils/CatchError.ts","webpack://dathoang29101997/./src/Utils/Help.ts","webpack://dathoang29101997/./src/Utils/MessageLog.ts","webpack://dathoang29101997/./src/Utils/index.ts","webpack://dathoang29101997/external commonjs \"@sendgrid/mail\"","webpack://dathoang29101997/external commonjs \"bcrypt\"","webpack://dathoang29101997/external commonjs \"jsonwebtoken\"","webpack://dathoang29101997/external commonjs \"mongoose\"","webpack://dathoang29101997/external commonjs \"multer\"","webpack://dathoang29101997/external commonjs \"sharp\"","webpack://dathoang29101997/external commonjs \"validator\"","webpack://dathoang29101997/webpack/bootstrap","webpack://dathoang29101997/webpack/startup"],"sourcesContent":["import { CastError, Error } from 'mongoose';\nimport { MongoError } from 'mongodb';\nimport { Response, Request, NextFunction } from 'express';\nimport { AppErrorHandling } from '@App/Utils/AppErrorHanding';\nimport { MessageLog } from '@App/Utils'\nexport type ErrorCastError = AppErrorHandling & CastError;\n\nexport type ErrorMongo = AppErrorHandling & MongoError;\n\nexport type ErrorValidator = AppErrorHandling & Error.ValidationError;\n\nconst { errorSomeThingWrong, errorDuplicate, errorCastMongoose, errorValidation, errorInvalidToken, errorTokenExpired } = MessageLog;\n\nconst sendErrorDev = (err: AppErrorHandling, res: Response) => {\n    res.status(err.statusCode).json({\n        status: err.status,\n        error: err,\n        message: err.message,\n        stack: err.stack,\n    });\n};\n\nconst sendErrorProd = (err: AppErrorHandling, res: Response) => {\n    //isOperational, trusted error: send message to client\n    if (err.isOperational) {\n        res.status(err.statusCode).json({\n            status: err.status,\n            message: err.message,\n        });\n    } else {\n        //Programming or other unknown error: don't leak error details\n        //1) Log error\n        console.error('ERROR 🎆', err);\n\n        //2) Send generic message\n        res.status(500).json({\n            status: 'error',\n            message: errorSomeThingWrong,\n        });\n    }\n};\n\nconst handleDuplicateMessage = (err: ErrorMongo) => {\n    //RegEx: Grabbing values between quotation marks\n    const value = err.errmsg.match(/([\"'])(?:(?=(\\\\?))\\2.)*?\\1/);\n    const message = errorDuplicate(value);\n    return new AppErrorHandling(message, 400);\n};\n\nconst handleCastErrorDB = (err: ErrorCastError) => {\n    const message = errorCastMongoose(err);\n    return new AppErrorHandling(message, 400);\n};\n\nconst handleValidationErrorDB = (err: ErrorValidator) => {\n    const errors = Object.values(err.errors).map((el) => el.message);\n    const message = errorValidation(errors);\n    return new AppErrorHandling(message, 400);\n};\n\nconst handleJWTError = () => new AppErrorHandling(errorInvalidToken, 401);\n\nconst handleJWTExpiredError = () => new AppErrorHandling(errorTokenExpired, 401);\n\nexport const ErrorController = (err: AppErrorHandling, req: Request, res: Response, next: NextFunction) => {\n    err.status = err.status || 'error';\n    err.statusCode = err.statusCode || 500;\n\n    if (process.env.NODE_ENV === 'development') {\n        return sendErrorDev(err, res);\n    } else {\n        let error = { ...err };\n\n        if (err.name === 'CastError') {\n            error = handleCastErrorDB(error as ErrorCastError);\n        }\n\n        if ((error as ErrorMongo).code === 11000) {\n            error = handleDuplicateMessage(error as ErrorMongo);\n        }\n\n        if (error.name === 'ValidationError') {\n            error = handleValidationErrorDB(error as ErrorValidator);\n        }\n\n        if (error.name === 'JsonWebTokenError') {\n            error = handleJWTError();\n        }\n\n        if (error.name === 'TokenExpiredError') {\n            error = handleJWTExpiredError();\n        }\n\n        return sendErrorProd(error, res);\n    }\n};","import { NextFunction } from 'express';\nimport { TaskModel } from '@App/Models/TaskModels';\nimport { IReqTask, IResTask } from '@App/Core/Models/Task';\nimport { catchError, AppErrorHandling, MessageLog } from '@App/Utils'\nimport { IUserDocument } from '@App/Core/Models/User';\n\nexport const createTask = catchError(async (req: IReqTask, res: IResTask, next: NextFunction) => {\n    const reqUser = req.user;\n    const task = new TaskModel({\n        ...req.body,\n        owner: reqUser._id\n    });\n    if (!task) {\n        const { errorCreateTask } = MessageLog;\n        return next(new AppErrorHandling(errorCreateTask, 400))\n    }\n    await task.save();\n    res.status(201).send(task);\n})\n\nexport const getTask = catchError(async (req: IReqTask, res: IResTask, next: NextFunction) => {\n    const reqUser = req.user as IUserDocument;\n    const match = {} as { completed: boolean };\n    const sort = {} as { [key: string]: number }; //{createdAt: 1 // 1: asc, -1: desc}\n    if (req.query.completed)\n        match.completed = req.query.completed === \"true\";\n\n    if (req.query.sortBy) {\n        const parts = req.query.sortBy.split(\":\");\n        sort[parts[0]] = parts[1] === \"desc\" ? -1 : 1;\n    }\n    const result = await reqUser\n        .populate({\n            path: \"tasks\",\n            match,\n            options: {\n                limit: parseInt(req.query.limit),\n                skip: parseInt(req.query.skip),\n                sort\n            }\n        })\n\n    if (!result) {\n        const { errorFetchTasks } = MessageLog;\n        return next(new AppErrorHandling(errorFetchTasks, 400))\n    }\n\n    res.send(req.user.tasks);\n})\n\nexport const getTaskById = catchError(async (req: IReqTask, res: IResTask, next: NextFunction) => {\n    const task = await TaskModel.findOne({\n        _id: req.params.id,\n        owner: req.user._id\n    });\n    if (!task) {\n        const { errorFetchTasks } = MessageLog;\n        return next(new AppErrorHandling(errorFetchTasks, 400))\n    }\n    res.send(task);\n})","import { NextFunction } from 'express';\nimport sharp from 'sharp';\nimport { IReqUser, IResUser, IUserDocument } from '@App/Core/Models/User';\nimport { catchError, AppErrorHandling, MessageLog } from '@App/Utils'\nimport { UserModel } from '@App/Models/UserModels';\nimport { sendWelcomeEmail } from '@App/Email/Account';\n\nconst { errorCreateUser } = MessageLog;\n\nexport const createUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = new UserModel(req.body);\n    if (!user)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n\n    await user.save();\n    sendWelcomeEmail(user.email, user.name);\n    const token = await user.generateAuthToken();\n    res.status(201).send({ user, token });\n})\n\nexport const userLogin = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = await UserModel.findByCredentials(\n        req.body.email,\n        req.body.password\n    );\n    if (!user)\n        return next(new AppErrorHandling(errorCreateUser, 400))\n\n    const token = await user.generateAuthToken();\n    res.send({ user, token });\n})\n\nexport const userLogout = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    req.user.tokens = req.user.tokens.filter(token => {\n        return token.token !== req.token;\n    }) as IUserDocument['tokens'];\n    const userUpdate = await req.user.save();\n\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n    res.send();\n})\n\nexport const userLogoutAll = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    req.user.tokens = [] as IUserDocument['tokens'];\n    const userUpdate = await req.user.save();\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n    res.send();\n})\n\nexport const getUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    if (req.user)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n    res.send(req.user);\n})\n\nexport const getUserById = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = await UserModel.findById(req.params.id);\n    if (!user)\n        return next(new AppErrorHandling(errorCreateUser, 404))\n    res.send(user);\n})\n\nexport const getUserMe = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = req.user as IUserDocument;\n    const updates = Object.keys(req.body);\n    const allowedUpdates = [\"name\", \"email\", \"password\", \"age\"];\n    const isValidOperation = updates.every(element =>\n        allowedUpdates.includes(element)\n    );\n    if (!isValidOperation)\n        return next(new AppErrorHandling(\"Invalid updates\", 400));\n\n    updates.forEach(element => (user[element as keyof typeof user] = req.body[element] as never));\n    const userUpdate = await user.save();\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(\"Updates Err\", 400));\n    res.send(req.user);\n})\n\nexport const deleteUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const userDelete = await req.user.remove();\n    if (!userDelete.$isDeleted)\n        return next(new AppErrorHandling(\"Delete Err\", 500));\n    res.send(req.user);\n})\n\nexport const uploadAvatarUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = req.user as IUserDocument;\n    user.avatar = await sharp(req.file.buffer)\n        .resize({ width: 250, height: 250 })\n        .png()\n        .toBuffer();\n\n    const userUpdate = await user.save();\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(\"Upload Avatar Err\", 400));\n    res.send();\n})\n\nexport const deleteAvatarUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    req.user.avatar = undefined;\n    const userUpdate = await req.user.save();\n    if (!userUpdate.$isDeleted)\n        return next(new AppErrorHandling(\"Delete Avatar\", 400));\n    res.send();\n\n})\n\nexport const getAvatarUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = await UserModel.findById(req.params.id);\n    if (!user || !user.avatar)\n        throw new Error();\n    res.set(\"Content-Type\", \"image/jpg\"); // Setting a response header name/value\n    res.send(user.avatar);\n    res.status(404).send();\n})","export * as ErrorController from './ErrorController';\r\nexport * as TaskController from './TaskController';\r\nexport * as UserController from './UserController';","import sgMail from '@sendgrid/mail';\nconst sendGridAPIKey = process.env.SENDGRID_API_KEY;\nsgMail.setApiKey(sendGridAPIKey);\n\nexport const sendWelcomeEmail = (email: string, name: string) => {\n    sgMail.send({\n        to: email,\n        from: \"taskManager@gmail.com\",\n        subject: \"Welcome to task manager\",\n        text: `Welcome to task manager ${name}!`,\n        html: \"<div>Hi!</div>\"\n    });\n};","import { ITaskDocument } from '@App/Core/Models/Task';\nimport { Schema, model } from 'mongoose';\n\nconst TaskSchema = new Schema<ITaskDocument>({\n    description: {\n        type: String,\n        required: true\n    },\n    completed: {\n        type: Boolean,\n        default: false\n    },\n    owner: {\n        type: Schema.Types.ObjectId,\n        required: true,\n        ref: \"User\"\n    }\n},\n    {\n        timestamps: true //Automatically adds created/updated\n    }\n);\n\nexport const TaskModel = model('Task', TaskSchema);","import { Schema, model } from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from \"bcrypt\";\nimport { IUserDocument, IUserModal } from '@App/Core/Models/User';\nimport { TaskModel } from './TaskModels';\nimport validator from 'validator';\n\nconst UserSchema = new Schema<IUserDocument, IUserModal>({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    lowercase: true,\n    validate(value: string) {\n      if (!validator.isEmail(value))\n        throw new Error('Email is invalid');\n    }\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 7,\n    trim: true,\n    validate(value: string) {\n      if (value.toLowerCase().includes('passwords')) {\n        throw new Error('Password cannot contain \"password\"');\n      }\n    }\n  },\n  age: {\n    type: Number,\n    default: 0,\n    validate(value: number) {\n      if (value < 0) {\n        throw new Error('Age must be a positive number');\n      }\n    }\n  },\n  tokens: [{ token: { type: String } }\n  ],\n  avatar: {\n    type: Buffer\n  }\n},\n  {\n    timestamps: true //Automatically adds created/updated\n  });\n\n\n// Virtual property - relation between two entities - not storage in database\nUserSchema.virtual(\"tasks\", {\n  ref: \"Task\",\n  localField: \"_id\",\n  foreignField: \"owner\"\n});\n\n// Methods are accessibles on the instances - dont use arrow function\nUserSchema.methods.generateAuthToken = async function () {\n  const user = this;\n  const token = jwt.sign({ _id: user._id.toSring() }, process.env.JWT_SECRET, {\n    expiresIn: \"7 days\"\n  });\n  user.token = user.tokens.concat({ token });\n  await user.save();\n  return token;\n};\n\nUserSchema.methods.convertJSON = async function () {\n  const user = this;\n  const userObject = user.toObject();\n  delete userObject.password;\n  delete userObject.tokens;\n  delete userObject.avatar;\n  return userObject;\n};\n\n// Statics are accessibles on the modal\n// On UserSchema.statics we can create any custom method\nUserSchema.statics.findByCredentials = async (email, password) => {\n  const user = await UserModel.findOne({ email });\n  if (!user) throw new Error(\"Unable to login\");\n  const isMatch = await bcrypt.compare(password, user.password);\n  if (!isMatch) throw new Error(\"Unable to login\");\n  return user;\n};\n\n// Hash the plain text password before saving\nUserSchema.pre(\"save\", async function (next) {\n  const user = this;\n  if (user.isModified(\"password\"))\n    user.password = await bcrypt.hash(user.password, 8);\n  next();\n});\n\n// Hash the plain text password before saving\nUserSchema.pre(\"remove\", { document: true, query: false }, async function (next) {\n  const user = this;\n  await TaskModel.deleteMany({ owner: user._id });\n  next();\n});\n\nexport const UserModel = model<IUserDocument, IUserModal>('User', UserSchema);","export class AppErrorHandling extends Error {\n    public statusCode: number;\n    public status: string;\n    public isOperational: boolean;\n  \n    constructor(message: string, statusCode: number) {\n      super(message);\n      this.statusCode = statusCode;\n      this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n      this.isOperational = true;\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }","import { NextFunction, Response, Request } from 'express';\nimport { AppErrorHandling } from './AppErrorHanding';\n\nexport const catchError = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    fn(req, res, next).catch((err: AppErrorHandling) => next(err));\n  };\n};","import multer from 'multer';\n\n// \\.(doc|docx)$ -> regular expression for serach for determined file extensions\nexport const upload = multer({\n    limits: { fileSize: 1000000 },\n    fileFilter(req, file, cb) {\n        //if (!file.originalname.endsWith(\".pdf\")) {\n        if (file.originalname.match(/\\.(doc|docx)$/)) {\n            return cb(new Error(\"Error in upload format\"));\n        }\n\n        cb(undefined, true);\n        //cb(undefined, false);\n    }\n});\n","import { ErrorCastError } from '@App/Controllers/ErrorController';\n\nconst errorSignUp = \"Can't SignUp User\";\nconst errorCreateUser = \"Can't Create User\";\nconst errorFetchUsers = \"Can't fetch data user or delete the previous. Please try again later!\";\nconst errorDeleteUser = \"Can't delete user. Please try again later!\";\nconst errorUpdateProfile = \"Can't update profile\";\nconst errorUpdateUser = \"Can't update user\";\n\n\nconst errorCreateTask = \"Can't Create Task\";\nconst errorFetchTasks = \"Can't fetch data Task or delete the previous. Please try again later!\";\nconst errorDeleteTask = \"Can't delete Task. Please try again later!\";\nconst errorUpdateTask = \"Can't update Task\";\n\nconst errorSomeThingWrong = 'Something went very wrong!';\nconst errorInvalidToken = 'Invalid token. Please log in again!';\nconst errorTokenExpired = 'Your token has expired! PLease login agian!';\nconst errorDuplicate = (value: RegExpMatchArray) =>\n    `Duplicate field value: ${value}. The User has been signup. PLease try use another phone or email`;\nconst errorCastMongoose = (err: ErrorCastError) => `Invalid ${err.path}: ${err.value}`;\nconst errorValidation = (errors: string[]) => `Invalid input data. ${errors.join('. ')} `;\n\nconst messageSubjectEmailResetPassword = 'Your password reset token valid for 10 min';\nconst messageTokenSentToEmail = 'Token sent to email!';\n\nconst messageForgotPassword = (resetUrl: string) =>\n    `Forgot your password? Submit a PATCH request with your new password and passwordConfirm to: ${resetUrl}.\\n If you didn't forget your password, please ignore this email!`;\n\nexport const MessageLog = {\n    errorSignUp,\n    errorCreateUser,\n    messageSubjectEmailResetPassword,\n    messageTokenSentToEmail,\n    errorFetchUsers,\n    errorDeleteUser,\n    errorUpdateProfile,\n    errorUpdateUser,\n    \n    errorCreateTask,\n    errorFetchTasks,\n    errorDeleteTask,\n    errorUpdateTask,\n\n    errorSomeThingWrong,\n    errorInvalidToken,\n    errorTokenExpired,\n\n    errorDuplicate,\n    errorCastMongoose,\n    errorValidation,\n    messageForgotPassword\n};","import { AppErrorHandling } from \"./AppErrorHanding\";\nimport { catchError } from './CatchError';\nimport { MessageLog } from \"./MessageLog\";\nimport { upload } from \"./Help\";\n\nexport { AppErrorHandling, catchError, MessageLog, upload }","module.exports = require(\"@sendgrid/mail\");","module.exports = require(\"bcrypt\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"sharp\");","module.exports = require(\"validator\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(150);\n"],"names":["errorSomeThingWrong","errorDuplicate","errorCastMongoose","errorValidation","errorInvalidToken","errorTokenExpired","MessageLog","ErrorController","err","req","res","next","status","statusCode","error","name","message","AppErrorHandling","handleCastErrorDB","code","value","errmsg","match","handleDuplicateMessage","errors","Object","values","map","el","handleValidationErrorDB","isOperational","json","console","sendErrorProd","createTask","catchError","async","reqUser","user","task","TaskModel","body","owner","_id","errorCreateTask","save","send","getTask","sort","query","completed","sortBy","parts","split","populate","path","options","limit","parseInt","skip","errorFetchTasks","tasks","getTaskById","findOne","params","id","errorCreateUser","createUser","UserModel","sendWelcomeEmail","email","token","generateAuthToken","userLogin","findByCredentials","password","userLogout","tokens","filter","isNew","userLogoutAll","getUser","getUserById","findById","getUserMe","updates","keys","allowedUpdates","every","element","includes","forEach","deleteUser","remove","$isDeleted","uploadAvatarUser","avatar","file","buffer","resize","width","height","png","toBuffer","deleteAvatarUser","undefined","getAvatarUser","Error","set","setApiKey","to","from","subject","text","html","TaskSchema","Schema","description","type","String","required","Boolean","default","Types","ObjectId","ref","timestamps","model","UserSchema","trim","lowercase","validate","isEmail","minlength","toLowerCase","age","Number","Buffer","virtual","localField","foreignField","methods","this","sign","toSring","expiresIn","concat","convertJSON","userObject","toObject","statics","compare","pre","isModified","hash","document","deleteMany","constructor","super","startsWith","captureStackTrace","fn","catch","upload","limits","fileSize","fileFilter","cb","originalname","errorSignUp","messageSubjectEmailResetPassword","messageTokenSentToEmail","errorFetchUsers","errorDeleteUser","errorUpdateProfile","errorUpdateUser","errorDeleteTask","errorUpdateTask","join","messageForgotPassword","resetUrl","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}