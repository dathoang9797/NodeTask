{"version":3,"file":"index.js","mappings":"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","sources":["webpack://nodeapp/./src/Configs/DB_Connect.ts","webpack://nodeapp/./src/Controllers/ErrorController.ts","webpack://nodeapp/./src/Controllers/TaskController.ts","webpack://nodeapp/./src/Controllers/UserController.ts","webpack://nodeapp/./src/Email/Account.ts","webpack://nodeapp/./src/Middleware/Auth.ts","webpack://nodeapp/./src/Models/TaskModels.ts","webpack://nodeapp/./src/Models/UserModels.ts","webpack://nodeapp/./src/Routers/TaskRouter.ts","webpack://nodeapp/./src/Routers/UserRouter.ts","webpack://nodeapp/./src/Utils/AppErrorHanding.ts","webpack://nodeapp/./src/Utils/CatchError.ts","webpack://nodeapp/./src/Utils/Help.ts","webpack://nodeapp/./src/Utils/MessageLog.ts","webpack://nodeapp/./src/Utils/index.ts","webpack://nodeapp/./src/app.ts","webpack://nodeapp/./src/index.ts","webpack://nodeapp/external commonjs \"@sendgrid/mail\"","webpack://nodeapp/external commonjs \"bcrypt\"","webpack://nodeapp/external commonjs \"express\"","webpack://nodeapp/external commonjs \"jsonwebtoken\"","webpack://nodeapp/external commonjs \"mongoose\"","webpack://nodeapp/external commonjs \"morgan\"","webpack://nodeapp/external commonjs \"multer\"","webpack://nodeapp/external commonjs \"sharp\"","webpack://nodeapp/external commonjs \"validator\"","webpack://nodeapp/external node-commonjs \"http\"","webpack://nodeapp/webpack/bootstrap","webpack://nodeapp/webpack/startup"],"sourcesContent":["import mongoose, { MongooseError } from 'mongoose';\nmongoose.set(\"strictQuery\", false);\nmongoose\n  .connect(process.env.URL_DATABASE)\n  .then(() => {\n    console.log('Connect to MongoDB');\n  })\n  .catch((err: MongooseError) => console.log(err));\n","import { CastError, Error } from 'mongoose';\nimport { MongoError } from 'mongodb';\nimport { Response, Request, NextFunction } from 'express';\nimport { AppErrorHandling } from '@App/Utils/AppErrorHanding';\nimport { MessageLog } from '@App/Utils'\nexport type ErrorCastError = AppErrorHandling & CastError;\n\nexport type ErrorMongo = AppErrorHandling & MongoError;\n\nexport type ErrorValidator = AppErrorHandling & Error.ValidationError;\n\nconst { errorSomeThingWrong, errorDuplicate, errorCastMongoose, errorValidation, errorInvalidToken, errorTokenExpired } = MessageLog;\n\nconst sendErrorDev = (err: AppErrorHandling, res: Response) => {\n    res.status(err.statusCode).json({\n        status: err.status,\n        error: err,\n        message: err.message,\n        stack: err.stack,\n    });\n};\n\nconst sendErrorProd = (err: AppErrorHandling, res: Response) => {\n    //isOperational, trusted error: send message to client\n    if (err.isOperational) {\n        res.status(err.statusCode).json({\n            status: err.status,\n            message: err.message,\n        });\n    } else {\n        //Programming or other unknown error: don't leak error details\n        //1) Log error\n        console.error('ERROR 🎆', err);\n\n        //2) Send generic message\n        res.status(500).json({\n            status: 'error',\n            message: errorSomeThingWrong,\n        });\n    }\n};\n\nconst handleDuplicateMessage = (err: ErrorMongo) => {\n    //RegEx: Grabbing values between quotation marks\n    const value = err.errmsg.match(/([\"'])(?:(?=(\\\\?))\\2.)*?\\1/);\n    const message = errorDuplicate(value);\n    return new AppErrorHandling(message, 400);\n};\n\nconst handleCastErrorDB = (err: ErrorCastError) => {\n    const message = errorCastMongoose(err);\n    return new AppErrorHandling(message, 400);\n};\n\nconst handleValidationErrorDB = (err: ErrorValidator) => {\n    const errors = Object.values(err.errors).map((el) => el.message);\n    const message = errorValidation(errors);\n    return new AppErrorHandling(message, 400);\n};\n\nconst handleJWTError = () => new AppErrorHandling(errorInvalidToken, 401);\n\nconst handleJWTExpiredError = () => new AppErrorHandling(errorTokenExpired, 401);\n\nexport const ErrorController = (err: AppErrorHandling, req: Request, res: Response, next: NextFunction) => {\n    err.status = err.status || 'error';\n    err.statusCode = err.statusCode || 500;\n\n    if (process.env.NODE_ENV === 'development') {\n        return sendErrorDev(err, res);\n    } else {\n        let error = { ...err };\n\n        if (err.name === 'CastError') {\n            error = handleCastErrorDB(error as ErrorCastError);\n        }\n\n        if ((error as ErrorMongo).code === 11000) {\n            error = handleDuplicateMessage(error as ErrorMongo);\n        }\n\n        if (error.name === 'ValidationError') {\n            error = handleValidationErrorDB(error as ErrorValidator);\n        }\n\n        if (error.name === 'JsonWebTokenError') {\n            error = handleJWTError();\n        }\n\n        if (error.name === 'TokenExpiredError') {\n            error = handleJWTExpiredError();\n        }\n\n        return sendErrorProd(error, res);\n    }\n};","import { NextFunction } from 'express';\nimport { TaskModel } from '@App/Models/TaskModels';\nimport { IReqTask, IResTask } from '@App/Core/Models/Task';\nimport { catchError, AppErrorHandling, MessageLog } from '@App/Utils'\nimport { IUserDocument } from '@App/Core/Models/User';\n\nexport const createTask = catchError(async (req: IReqTask, res: IResTask, next: NextFunction) => {\n    const reqUser = req.user;\n    const task = new TaskModel({\n        ...req.body,\n        owner: reqUser._id\n    });\n    if (!task) {\n        const { errorCreateTask } = MessageLog;\n        return next(new AppErrorHandling(errorCreateTask, 400))\n    }\n    await task.save();\n    res.status(201).send(task);\n})\n\nexport const getTask = catchError(async (req: IReqTask, res: IResTask, next: NextFunction) => {\n    const reqUser = req.user as IUserDocument;\n    const match = {} as { completed: boolean };\n    const sort = {} as { [key: string]: number }; //{createdAt: 1 // 1: asc, -1: desc}\n    if (req.query.completed)\n        match.completed = req.query.completed === \"true\";\n\n    if (req.query.sortBy) {\n        const parts = req.query.sortBy.split(\":\");\n        sort[parts[0]] = parts[1] === \"desc\" ? -1 : 1;\n    }\n    const result = await reqUser\n        .populate({\n            path: \"tasks\",\n            match,\n            options: {\n                limit: parseInt(req.query.limit),\n                skip: parseInt(req.query.skip),\n                sort\n            }\n        })\n\n    if (!result) {\n        const { errorFetchTasks } = MessageLog;\n        return next(new AppErrorHandling(errorFetchTasks, 400))\n    }\n\n    res.send(req.user.tasks);\n})\n\nexport const getTaskById = catchError(async (req: IReqTask, res: IResTask, next: NextFunction) => {\n    const task = await TaskModel.findOne({\n        _id: req.params.id,\n        owner: req.user._id\n    });\n    if (!task) {\n        const { errorFetchTasks } = MessageLog;\n        return next(new AppErrorHandling(errorFetchTasks, 400))\n    }\n    res.send(task);\n})","import { NextFunction } from 'express';\nimport sharp from 'sharp';\nimport { IReqUser, IResUser, IUserDocument } from '@App/Core/Models/User';\nimport { catchError, AppErrorHandling, MessageLog } from '@App/Utils'\nimport { UserModel } from '@App/Models/UserModels';\nimport { sendWelcomeEmail } from '@App/Email/Account';\n\nconst { errorCreateUser } = MessageLog;\n\nexport const createUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = new UserModel(req.body);\n    if (!user)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n\n    await user.save();\n    sendWelcomeEmail(user.email, user.name);\n    const token = await user.generateAuthToken();\n    res.status(201).send({ user, token });\n})\n\nexport const userLogin = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = await UserModel.findByCredentials(\n        req.body.email,\n        req.body.password\n    );\n    if (!user)\n        return next(new AppErrorHandling(errorCreateUser, 400))\n\n    const token = await user.generateAuthToken();\n    res.send({ user, token });\n})\n\nexport const userLogout = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    req.user.tokens = req.user.tokens.filter(token => {\n        return token.token !== req.token;\n    }) as IUserDocument['tokens'];\n    const userUpdate = await req.user.save();\n\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n    res.send();\n})\n\nexport const userLogoutAll = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    req.user.tokens = [] as IUserDocument['tokens'];\n    const userUpdate = await req.user.save();\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n    res.send();\n})\n\nexport const getUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    if (req.user)\n        return next(new AppErrorHandling(errorCreateUser, 500))\n    res.send(req.user);\n})\n\nexport const getUserById = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = await UserModel.findById(req.params.id);\n    if (!user)\n        return next(new AppErrorHandling(errorCreateUser, 404))\n    res.send(user);\n})\n\nexport const getUserMe = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = req.user as IUserDocument;\n    const updates = Object.keys(req.body);\n    const allowedUpdates = [\"name\", \"email\", \"password\", \"age\"];\n    const isValidOperation = updates.every(element =>\n        allowedUpdates.includes(element)\n    );\n    if (!isValidOperation)\n        return next(new AppErrorHandling(\"Invalid updates\", 400));\n\n    updates.forEach(element => (user[element as keyof typeof user] = req.body[element] as never));\n    const userUpdate = await user.save();\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(\"Updates Err\", 400));\n    res.send(req.user);\n})\n\nexport const deleteUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const userDelete = await req.user.remove();\n    if (!userDelete.$isDeleted)\n        return next(new AppErrorHandling(\"Delete Err\", 500));\n    res.send(req.user);\n})\n\nexport const uploadAvatarUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = req.user as IUserDocument;\n    user.avatar = await sharp(req.file.buffer)\n        .resize({ width: 250, height: 250 })\n        .png()\n        .toBuffer();\n\n    const userUpdate = await user.save();\n    if (!userUpdate.isNew)\n        return next(new AppErrorHandling(\"Upload Avatar Err\", 400));\n    res.send();\n})\n\nexport const deleteAvatarUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    req.user.avatar = undefined;\n    const userUpdate = await req.user.save();\n    if (!userUpdate.$isDeleted)\n        return next(new AppErrorHandling(\"Delete Avatar\", 400));\n    res.send();\n\n})\n\nexport const getAvatarUser = catchError(async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    const user = await UserModel.findById(req.params.id);\n    if (!user || !user.avatar)\n        throw new Error();\n    res.set(\"Content-Type\", \"image/jpg\"); // Setting a response header name/value\n    res.send(user.avatar);\n    res.status(404).send();\n})","import sgMail from '@sendgrid/mail';\nconst sendGridAPIKey = process.env.SENDGRID_API_KEY;\nsgMail.setApiKey(sendGridAPIKey);\n\nexport const sendWelcomeEmail = (email: string, name: string) => {\n    sgMail.send({\n        to: email,\n        from: \"taskManager@gmail.com\",\n        subject: \"Welcome to task manager\",\n        text: `Welcome to task manager ${name}!`,\n        html: \"<div>Hi!</div>\"\n    });\n};","import jwt from 'jsonwebtoken';\nimport { NextFunction } from 'express';\nimport { UserModel } from '@App/Models/UserModels';\nimport { IReqUser, IResUser } from '@App/Core/Models/User'\nimport { JwtPayload } from '@App/Core/Models/Jwt';\n\n\nexport const auth = async (req: IReqUser, res: IResUser, next: NextFunction) => {\n    try {\n        const token = req.header(\"Authorization\").replace(\"Bearer \", \"\");\n        const decoded = jwt.verify(token, process.env.JWT_SECRET) as JwtPayload;\n        const user = await UserModel.findOne({\n            _id: decoded._id,\n            \"tokens.token\": token\n        });\n\n        if (!user) {\n            throw new Error();\n        }\n        req.token = token;\n        req.user = user;\n        next();\n    } catch (error) {\n        res.status(401).send({ error: \"Invalid authentication\" });\n    }\n};","import { ITaskDocument } from '@App/Core/Models/Task';\nimport { Schema, model } from 'mongoose';\n\nconst TaskSchema = new Schema<ITaskDocument>({\n    description: {\n        type: String,\n        required: true\n    },\n    completed: {\n        type: Boolean,\n        default: false\n    },\n    owner: {\n        type: Schema.Types.ObjectId,\n        required: true,\n        ref: \"User\"\n    }\n},\n    {\n        timestamps: true //Automatically adds created/updated\n    }\n);\n\nexport const TaskModel = model('Task', TaskSchema);","import { Schema, model } from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from \"bcrypt\";\nimport { IUserDocument, IUserModal } from '@App/Core/Models/User';\nimport { TaskModel } from './TaskModels';\nimport validator from 'validator';\n\nconst UserSchema = new Schema<IUserDocument, IUserModal>({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    lowercase: true,\n    validate(value: string) {\n      if (!validator.isEmail(value))\n        throw new Error('Email is invalid');\n    }\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 7,\n    trim: true,\n    validate(value: string) {\n      if (value.toLowerCase().includes('passwords')) {\n        throw new Error('Password cannot contain \"password\"');\n      }\n    }\n  },\n  age: {\n    type: Number,\n    default: 0,\n    validate(value: number) {\n      if (value < 0) {\n        throw new Error('Age must be a positive number');\n      }\n    }\n  },\n  tokens: [{ token: { type: String } }\n  ],\n  avatar: {\n    type: Buffer\n  }\n},\n  {\n    timestamps: true //Automatically adds created/updated\n  });\n\n\n// Virtual property - relation between two entities - not storage in database\nUserSchema.virtual(\"tasks\", {\n  ref: \"Task\",\n  localField: \"_id\",\n  foreignField: \"owner\"\n});\n\n// Methods are accessibles on the instances - dont use arrow function\nUserSchema.methods.generateAuthToken = async function () {\n  const user = this;\n  const token = jwt.sign({ _id: user._id.toSring() }, process.env.JWT_SECRET, {\n    expiresIn: \"7 days\"\n  });\n  user.token = user.tokens.concat({ token });\n  await user.save();\n  return token;\n};\n\nUserSchema.methods.convertJSON = async function () {\n  const user = this;\n  const userObject = user.toObject();\n  delete userObject.password;\n  delete userObject.tokens;\n  delete userObject.avatar;\n  return userObject;\n};\n\n// Statics are accessibles on the modal\n// On UserSchema.statics we can create any custom method\nUserSchema.statics.findByCredentials = async (email, password) => {\n  const user = await UserModel.findOne({ email });\n  if (!user) throw new Error(\"Unable to login\");\n  const isMatch = await bcrypt.compare(password, user.password);\n  if (!isMatch) throw new Error(\"Unable to login\");\n  return user;\n};\n\n// Hash the plain text password before saving\nUserSchema.pre(\"save\", async function (next) {\n  const user = this;\n  if (user.isModified(\"password\"))\n    user.password = await bcrypt.hash(user.password, 8);\n  next();\n});\n\n// Hash the plain text password before saving\nUserSchema.pre(\"remove\", { document: true, query: false }, async function (next) {\n  const user = this;\n  await TaskModel.deleteMany({ owner: user._id });\n  next();\n});\n\nexport const UserModel = model<IUserDocument, IUserModal>('User', UserSchema);","import express from 'express';\nimport { auth } from '@App/Middleware/Auth';\nimport { createTask, getTask, getTaskById } from '@App/Controllers/TaskController';\n\nconst routerTask = express.Router();\n\nrouterTask.post(\"/tasks\", auth, createTask);\n\n// GET /tasks?completed=true  query\n// GET /taks?limit=10&skip=0  pagination\n// GET /tasks?sortBy=createdAt:desc\nrouterTask.get(\"/tasks\", auth, getTask);\n\nrouterTask.get(\"/tasks/:id\", auth, getTaskById);\n\nexport default routerTask;","import express from 'express';\nimport { UserModel } from '@App/Models/UserModels';\nimport { auth } from '@App/Middleware/Auth';\nimport { IUserDocument, IReqUser, IResUser } from '@App/Core/Models/User';\nimport { createUser, userLogin, userLogout, userLogoutAll, getUser, getUserById, getUserMe, deleteUser, uploadAvatarUser, deleteAvatarUser, getAvatarUser } from '@App/Controllers/UserController';\nimport { upload } from '@App/Utils';\n\n\nconst routerUser = express.Router();\n\nrouterUser.post(\"/users\", createUser);\n\nrouterUser.post(\"/users/login\", userLogin);\n\nrouterUser.post(\"/users/logout\", userLogout);\n\nrouterUser.post(\"/users/logoutAll\", userLogoutAll);\n\nrouterUser.get(\"/users/me\", auth, getUser);\n\nrouterUser.get(\"/users/:id\", auth, getUserById);\n\nrouterUser.patch(\"/users/me\", auth, getUserMe);\n\nrouterUser.delete(\"/users/me\", auth, deleteUser);\n\n// On postman: Body->form-data->KEY equals FIELD that equals a file\nrouterUser.post(\"/users/me/avatar\", auth, upload.single(\"avatar\"), uploadAvatarUser);\n\nrouterUser.delete(\"/users/me/avatar\", auth, deleteAvatarUser);\n\nrouterUser.get(\"/users/:id/avatar\",getAvatarUser);\n\nexport default routerUser;","export class AppErrorHandling extends Error {\n    public statusCode: number;\n    public status: string;\n    public isOperational: boolean;\n  \n    constructor(message: string, statusCode: number) {\n      super(message);\n      this.statusCode = statusCode;\n      this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n      this.isOperational = true;\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }","import { NextFunction, Response, Request } from 'express';\nimport { AppErrorHandling } from './AppErrorHanding';\n\nexport const catchError = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    fn(req, res, next).catch((err: AppErrorHandling) => next(err));\n  };\n};","import multer from 'multer';\n\n// \\.(doc|docx)$ -> regular expression for serach for determined file extensions\nexport const upload = multer({\n    limits: { fileSize: 1000000 },\n    fileFilter(req, file, cb) {\n        //if (!file.originalname.endsWith(\".pdf\")) {\n        if (file.originalname.match(/\\.(doc|docx)$/)) {\n            return cb(new Error(\"Error in upload format\"));\n        }\n\n        cb(undefined, true);\n        //cb(undefined, false);\n    }\n});\n","import { ErrorCastError } from '@App/Controllers/ErrorController';\n\nconst errorSignUp = \"Can't SignUp User\";\nconst errorCreateUser = \"Can't Create User\";\nconst errorFetchUsers = \"Can't fetch data user or delete the previous. Please try again later!\";\nconst errorDeleteUser = \"Can't delete user. Please try again later!\";\nconst errorUpdateProfile = \"Can't update profile\";\nconst errorUpdateUser = \"Can't update user\";\n\n\nconst errorCreateTask = \"Can't Create Task\";\nconst errorFetchTasks = \"Can't fetch data Task or delete the previous. Please try again later!\";\nconst errorDeleteTask = \"Can't delete Task. Please try again later!\";\nconst errorUpdateTask = \"Can't update Task\";\n\nconst errorSomeThingWrong = 'Something went very wrong!';\nconst errorInvalidToken = 'Invalid token. Please log in again!';\nconst errorTokenExpired = 'Your token has expired! PLease login agian!';\nconst errorDuplicate = (value: RegExpMatchArray) =>\n    `Duplicate field value: ${value}. The User has been signup. PLease try use another phone or email`;\nconst errorCastMongoose = (err: ErrorCastError) => `Invalid ${err.path}: ${err.value}`;\nconst errorValidation = (errors: string[]) => `Invalid input data. ${errors.join('. ')} `;\n\nconst messageSubjectEmailResetPassword = 'Your password reset token valid for 10 min';\nconst messageTokenSentToEmail = 'Token sent to email!';\n\nconst messageForgotPassword = (resetUrl: string) =>\n    `Forgot your password? Submit a PATCH request with your new password and passwordConfirm to: ${resetUrl}.\\n If you didn't forget your password, please ignore this email!`;\n\nexport const MessageLog = {\n    errorSignUp,\n    errorCreateUser,\n    messageSubjectEmailResetPassword,\n    messageTokenSentToEmail,\n    errorFetchUsers,\n    errorDeleteUser,\n    errorUpdateProfile,\n    errorUpdateUser,\n    \n    errorCreateTask,\n    errorFetchTasks,\n    errorDeleteTask,\n    errorUpdateTask,\n\n    errorSomeThingWrong,\n    errorInvalidToken,\n    errorTokenExpired,\n\n    errorDuplicate,\n    errorCastMongoose,\n    errorValidation,\n    messageForgotPassword\n};","import { AppErrorHandling } from \"./AppErrorHanding\";\nimport { catchError } from './CatchError';\nimport { MessageLog } from \"./MessageLog\";\nimport { upload } from \"./Help\";\n\nexport { AppErrorHandling, catchError, MessageLog, upload }","import express from 'express';\nimport morgan from 'morgan';\nimport routerUser from '@App/Routers/UserRouter';\nimport routerTask from '@App/Routers/TaskRouter';\nimport { ErrorController } from './Controllers/ErrorController';\nimport './Configs/DB_Connect';\n\nconst app = express();\n\nif (process.env.NODE_ENV === 'development')\n    app.use(morgan('dev'))\n\napp.use(express.json());\napp.use(routerUser);\napp.use(routerTask);\n\napp.all('*', (req, res, next) => {\n    res.status(404).json('Error 404');\n});\napp.use(ErrorController);\n\nexport default app;\n","import http from 'http';\nimport app from './app';\n\nexport const server = http.createServer(app);\nconst port = process.env.PORT || 3000;\n\nserver.listen(port, () => {\n  console.log('Server running on:' + port);\n});\n","module.exports = require(\"@sendgrid/mail\");","module.exports = require(\"bcrypt\");","module.exports = require(\"express\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"multer\");","module.exports = require(\"sharp\");","module.exports = require(\"validator\");","module.exports = require(\"http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["set","connect","then","console","log","catch","err","errorSomeThingWrong","errorDuplicate","errorCastMongoose","errorValidation","errorInvalidToken","errorTokenExpired","MessageLog","ErrorController","req","res","next","status","statusCode","error","name","message","AppErrorHandling","handleCastErrorDB","code","value","errmsg","match","handleDuplicateMessage","errors","Object","values","map","el","handleValidationErrorDB","isOperational","json","sendErrorProd","createTask","catchError","async","reqUser","user","task","TaskModel","body","owner","_id","errorCreateTask","save","send","getTask","sort","query","completed","sortBy","parts","split","populate","path","options","limit","parseInt","skip","errorFetchTasks","tasks","getTaskById","findOne","params","id","errorCreateUser","createUser","UserModel","sendWelcomeEmail","email","token","generateAuthToken","userLogin","findByCredentials","password","userLogout","tokens","filter","isNew","userLogoutAll","getUser","getUserById","findById","getUserMe","updates","keys","allowedUpdates","every","element","includes","forEach","deleteUser","remove","$isDeleted","uploadAvatarUser","avatar","file","buffer","resize","width","height","png","toBuffer","deleteAvatarUser","undefined","getAvatarUser","Error","setApiKey","to","from","subject","text","html","auth","header","replace","decoded","verify","TaskSchema","Schema","description","type","String","required","Boolean","default","Types","ObjectId","ref","timestamps","model","UserSchema","trim","lowercase","validate","isEmail","minlength","toLowerCase","age","Number","Buffer","virtual","localField","foreignField","methods","this","sign","toSring","expiresIn","concat","convertJSON","userObject","toObject","statics","compare","pre","isModified","hash","document","deleteMany","routerTask","Router","post","get","routerUser","patch","delete","upload","single","constructor","super","startsWith","captureStackTrace","fn","limits","fileSize","fileFilter","cb","originalname","errorSignUp","messageSubjectEmailResetPassword","messageTokenSentToEmail","errorFetchUsers","errorDeleteUser","errorUpdateProfile","errorUpdateUser","errorDeleteTask","errorUpdateTask","join","messageForgotPassword","resetUrl","app","use","all","server","createServer","port","listen","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}